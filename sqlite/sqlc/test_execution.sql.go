// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: test_execution.sql

package sqlc

import (
	"context"
	"time"

	"github.com/annexsh/annex/test"
	"github.com/annexsh/annex/uuid"
)

const createTestExecutionInput = `-- name: CreateTestExecutionInput :exec
INSERT INTO test_execution_inputs (test_execution_id, data)
VALUES (?, ?)
ON CONFLICT(test_execution_id) DO UPDATE
    SET data = excluded.data
`

type CreateTestExecutionInputParams struct {
	TestExecutionID test.TestExecutionID `json:"test_execution_id"`
	Data            []byte               `json:"data"`
}

func (q *Queries) CreateTestExecutionInput(ctx context.Context, arg CreateTestExecutionInputParams) error {
	_, err := q.db.ExecContext(ctx, createTestExecutionInput, arg.TestExecutionID, arg.Data)
	return err
}

const createTestExecutionScheduled = `-- name: CreateTestExecutionScheduled :one
INSERT INTO test_executions (id, test_id, has_input, schedule_time)
VALUES (?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE
    SET test_id       = excluded.test_id,
        has_input     = excluded.has_input,
        schedule_time = excluded.schedule_time,
        start_time    = NULL,
        finish_time   = NULL,
        error         = NULL
RETURNING id, test_id, has_input, schedule_time, start_time, finish_time, error
`

type CreateTestExecutionScheduledParams struct {
	ID           test.TestExecutionID `json:"id"`
	TestID       uuid.V7              `json:"test_id"`
	HasInput     bool                 `json:"has_input"`
	ScheduleTime time.Time            `json:"schedule_time"`
}

func (q *Queries) CreateTestExecutionScheduled(ctx context.Context, arg CreateTestExecutionScheduledParams) (*TestExecution, error) {
	row := q.db.QueryRowContext(ctx, createTestExecutionScheduled,
		arg.ID,
		arg.TestID,
		arg.HasInput,
		arg.ScheduleTime,
	)
	var i TestExecution
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.HasInput,
		&i.ScheduleTime,
		&i.StartTime,
		&i.FinishTime,
		&i.Error,
	)
	return &i, err
}

const getTestExecution = `-- name: GetTestExecution :one
SELECT id, test_id, has_input, schedule_time, start_time, finish_time, error
FROM test_executions
WHERE id = ?
`

func (q *Queries) GetTestExecution(ctx context.Context, id test.TestExecutionID) (*TestExecution, error) {
	row := q.db.QueryRowContext(ctx, getTestExecution, id)
	var i TestExecution
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.HasInput,
		&i.ScheduleTime,
		&i.StartTime,
		&i.FinishTime,
		&i.Error,
	)
	return &i, err
}

const getTestExecutionInput = `-- name: GetTestExecutionInput :one
SELECT test_execution_id, data
FROM test_execution_inputs
WHERE test_execution_id = ?
`

func (q *Queries) GetTestExecutionInput(ctx context.Context, testExecutionID test.TestExecutionID) (*TestExecutionInput, error) {
	row := q.db.QueryRowContext(ctx, getTestExecutionInput, testExecutionID)
	var i TestExecutionInput
	err := row.Scan(&i.TestExecutionID, &i.Data)
	return &i, err
}

const listTestExecutions = `-- name: ListTestExecutions :many
SELECT id, test_id, has_input, schedule_time, start_time, finish_time, error
FROM test_executions
WHERE (test_id = ?1)
  -- Cast as text required below since sqlc.narg doesn't work with overridden column type
  AND (CAST(?2 AS TEXT) IS NULL OR id < CAST(?2 AS TEXT))
ORDER BY id DESC
LIMIT ?3
`

type ListTestExecutionsParams struct {
	TestID   uuid.V7 `json:"test_id"`
	OffsetID *string `json:"offset_id"`
	PageSize int64   `json:"page_size"`
}

func (q *Queries) ListTestExecutions(ctx context.Context, arg ListTestExecutionsParams) ([]*TestExecution, error) {
	rows, err := q.db.QueryContext(ctx, listTestExecutions, arg.TestID, arg.OffsetID, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*TestExecution
	for rows.Next() {
		var i TestExecution
		if err := rows.Scan(
			&i.ID,
			&i.TestID,
			&i.HasInput,
			&i.ScheduleTime,
			&i.StartTime,
			&i.FinishTime,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetTestExecution = `-- name: ResetTestExecution :one
UPDATE test_executions
SET schedule_time = ?,
    start_time    = NULL,
    finish_time   = NULL,
    error         = NULL
WHERE id = ?
RETURNING id, test_id, has_input, schedule_time, start_time, finish_time, error
`

type ResetTestExecutionParams struct {
	ResetTime time.Time            `json:"reset_time"`
	ID        test.TestExecutionID `json:"id"`
}

func (q *Queries) ResetTestExecution(ctx context.Context, arg ResetTestExecutionParams) (*TestExecution, error) {
	row := q.db.QueryRowContext(ctx, resetTestExecution, arg.ResetTime, arg.ID)
	var i TestExecution
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.HasInput,
		&i.ScheduleTime,
		&i.StartTime,
		&i.FinishTime,
		&i.Error,
	)
	return &i, err
}

const updateTestExecutionFinished = `-- name: UpdateTestExecutionFinished :one
UPDATE test_executions
SET finish_time = ?,
    error       = ?
WHERE id = ?
RETURNING id, test_id, has_input, schedule_time, start_time, finish_time, error
`

type UpdateTestExecutionFinishedParams struct {
	FinishTime *time.Time           `json:"finish_time"`
	Error      *string              `json:"error"`
	ID         test.TestExecutionID `json:"id"`
}

func (q *Queries) UpdateTestExecutionFinished(ctx context.Context, arg UpdateTestExecutionFinishedParams) (*TestExecution, error) {
	row := q.db.QueryRowContext(ctx, updateTestExecutionFinished, arg.FinishTime, arg.Error, arg.ID)
	var i TestExecution
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.HasInput,
		&i.ScheduleTime,
		&i.StartTime,
		&i.FinishTime,
		&i.Error,
	)
	return &i, err
}

const updateTestExecutionStarted = `-- name: UpdateTestExecutionStarted :one
UPDATE test_executions
SET start_time  = ?,
    finish_time = NULL,
    error       = NULL
WHERE id = ?
RETURNING id, test_id, has_input, schedule_time, start_time, finish_time, error
`

type UpdateTestExecutionStartedParams struct {
	StartTime *time.Time           `json:"start_time"`
	ID        test.TestExecutionID `json:"id"`
}

func (q *Queries) UpdateTestExecutionStarted(ctx context.Context, arg UpdateTestExecutionStartedParams) (*TestExecution, error) {
	row := q.db.QueryRowContext(ctx, updateTestExecutionStarted, arg.StartTime, arg.ID)
	var i TestExecution
	err := row.Scan(
		&i.ID,
		&i.TestID,
		&i.HasInput,
		&i.ScheduleTime,
		&i.StartTime,
		&i.FinishTime,
		&i.Error,
	)
	return &i, err
}
