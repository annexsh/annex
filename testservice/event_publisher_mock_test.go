// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package testservice

import (
	eventsv1 "github.com/annexsh/annex-proto/go/gen/annex/events/v1"
	"github.com/annexsh/annex/event"
	"sync"
)

// Ensure, that PublisherMock does implement event.Publisher.
// If this is not the case, regenerate this file with moq.
var _ event.Publisher = &PublisherMock{}

// PublisherMock is a mock implementation of event.Publisher.
//
//	func TestSomethingThatUsesPublisher(t *testing.T) {
//
//		// make and configure a mocked event.Publisher
//		mockedPublisher := &PublisherMock{
//			PublishFunc: func(testExecID string, event *eventsv1.Event) error {
//				panic("mock out the Publish method")
//			},
//		}
//
//		// use mockedPublisher in code that requires event.Publisher
//		// and then make assertions.
//
//	}
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(testExecID string, event *eventsv1.Event) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// TestExecID is the testExecID argument value.
			TestExecID string
			// Event is the event argument value.
			Event *eventsv1.Event
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(testExecID string, event *eventsv1.Event) error {
	if mock.PublishFunc == nil {
		panic("PublisherMock.PublishFunc: method is nil but Publisher.Publish was just called")
	}
	callInfo := struct {
		TestExecID string
		Event      *eventsv1.Event
	}{
		TestExecID: testExecID,
		Event:      event,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(testExecID, event)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	TestExecID string
	Event      *eventsv1.Event
} {
	var calls []struct {
		TestExecID string
		Event      *eventsv1.Event
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
